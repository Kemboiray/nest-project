###
# @name login
POST http://localhost:3000/auth/login HTTP/1.0
Accept: application/json
Content-type: application/json

{
  "email": "brian@gmail.com",
  "password": "3359"
}

###
# GET all users

GET http://localhost:3000/users HTTP/1.0
Accept: application/json
Authorization: Bearer {{login.response.body.$.access_token}}

###
# GET a user by `id`

GET http://localhost:3000/users/66deb788ac76352327b11ecf HTTP/1.0
Accept: application/json
Authorization: Bearer {{login.response.body.$.access_token}}

###
# Create a user. Should fail with 409 if repeated.

POST http://localhost:3000/auth/register HTTP/1.0
Accept: application/json
Content-type: application/json

{
  "email": "gait@gmail.com",
  "name": "Gait Pkiach",
  "password": "3354"
}

###
# Log in with wrong password. Should return 401 error.

POST http://localhost:3000/auth/login HTTP/1.0
Accept: application/json
Content-type: application/json

{
  "email": "brian@gmail.com",
  "password": "8359"
}

###
# Log in with non-existent email. Should return 404 error.

POST http://localhost:3000/auth/login HTTP/1.0
Accept: application/json
Content-type: application/json

{
  "email": "briancada@gmail.com",
  "password": "3359"
}

###
# Update a user

PUT http://localhost:3000/users/66deb788ac76352327b11ecf HTTP/1.0
Accept: application/json
Content-type: application/json
Authorization: Bearer {{login.response.body.$.access_token}}

{
  "name": "Ray Kemboi K",
}

###
# GET a user (with malformed `id`). Should return 400

GET http://localhost:3000/users/6def604e57d9d741ea085a5 HTTP/1.0
Accept: application/json
Authorization: Bearer {{login.response.body.$.access_token}}

###
# GET a non-existent user
GET http://localhost:3000/users/66dcf604e57d9d741ea085a5 HTTP/1.0
Accept: application/json
Authorization: Bearer {{login.response.body.$.access_token}}


###

DELETE http://localhost:3000/users/66deb89bac76352327b11ed5 HTTP/1.0
Accept: application/json
Authorization: Bearer {{login.response.body.$.access_token}}

###
